"indentation:" = "Indentation:";
"length:" = "Length:";
"indentConditionalCompilationBlocks" = "Indent conditional compilation blocks";
"tabWidth:" = "Tab Width:";
"spaces" = "spaces";
"lineLength:" = "Line Length:";
"lineBreaks:" = "Line Breaks:";
"respectsExistingLineBreaks" = "Respects existing line breaks";
"lineBreakBeforeControlFlowKeywords" = "Line break before control flow keywords";
"lineBreakBeforeEachArgument" = "Line break before each argument";
"lineBreakBeforeEachGenericRequirement" = "Line break before each generic requirement";
"prioritizeKeepingFunctionOutputTogether" = "Prioritize keeping function output together";
"maximumBlankLines:" = "Maximum blank lines:";
"lineBreakAroundMultilineExpressionChainComponents" = "Line break around multiline expression chain components";
"Spaces" = "Spaces";
"Tabs" = "Tabs";
"LENGTH_TOOLTIP" = "The amount of whitespace that should be added when indenting one level";
"WHITESPACE_TOOLTIP" = "The type of whitespace that should be added when indenting";
"INDENT_CONDITIONAL_COMPILATION_BLOCKS_TOOLTIP" = "Determines if conditional compilation blocks are indented. If this setting is false the body of #if, #elseif, and #else is not indented.";
"TAB_WIDTH_TOOLTIP" = "The number of spaces that should be considered equivalent to one tab character. This is used during line length calculations when tabs are used for indentation.";
"LINE_LENGTH_TOOLTIP" = "The maximum allowed length of a line, in characters";
"RESPECTS_EXISTING_LINE_BREAKS" = " Indicates whether or not existing line breaks in the source code should be honored (if they are valid according to the style guidelines being enforced). If this settings is false, then the formatter will be more opinionated by only inserting line breaks where absolutely necessary and removing any others, effectively canonicalizing the output.";
"LINE_BREAK_BEFORE_CONTROL_FLOW_KEYWORDS_TOOLTIP" = "Determines the line-breaking behavior for control flow keywords that follow a closing brace, like else and catch. If true, a line break will be added before the keyword, forcing it onto its own line. If false, the keyword will be placed after the closing brace (separated by a space).";
"LINE_BREAK_BEFORE_EACH_ARGUMENT_TOOLTIP" = "Determines the line-breaking behavior for generic arguments and function arguments when a declaration is wrapped onto multiple lines. If true, a line break will be added before each argument, forcing the entire argument list to be laid out vertically. If false, arguments will be laid out horizontally first, with line breaks only being fired when the line length would be exceeded.";
"LINE_BREAK_BEFORE_EACH_GENERIC_REQUIREMENT_TOOLTIP" = "Determines the line-breaking behavior for generic requirements when the requirements list is wrapped onto multiple lines. If true, a line break will be added before each requirement, forcing the entire requirements list to be laid out vertically. If false, requirements will be laid out horizontally first, with line breaks only being fired when the line length would be exceeded.";
"PRIORITIZE_KEEPING_FUNCTION_OUTPUT_TOGETHER_TOOLTIP" = "Determines if function-like declaration outputs should be prioritized to be together with the function signature right (closing) parenthesis. If false, function output (i.e. throws, return type) is not prioritized to be together with the signature's right parenthesis, and when the line length would be exceeded, a line break will be fired after the function signature first, indenting the declaration output one additional level. If true, A line break will be fired further up in the function's declaration (e.g. generic parameters, parameters) before breaking on the function's output.";
"MAXIMUM_BLANK_LINES_TOOLTIP" = "The maximum number of consecutive blank lines that are allowed to be present in a source file. Any number larger than this will be collapsed down to the maximum.";
"LINE_BREAK_AROUND_MULTILINE_EXPRESSION_CHAIN_COMPONENTS_TOOLTIP" = "Determines whether line breaks should be forced before and after multiline components of dot-chained expressions, such as function calls and subscripts chained together through member access (i.e. \".\" expressions). When any component is multiline and this option is true, a line break is forced before the \".\" of the component and after the component's closing delimiter (i.e. right paren, right bracket, right brace, etc.).";
